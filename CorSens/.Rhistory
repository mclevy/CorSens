Qsw == round( (Psw/(OEsw*TFP*Pp*Qgw^OEgw))^(1/(OEsw - 1)), 5)
round( (Psw/(OEsw*TFP*Pp*Qgw^OEgw))^(1/(OEsw - 1)), 5)
Qsw
(Pgw/(OEgw*TFP*Pp*Qsw^OEsw))^(1/(OEgw - 1))
library(nleqslv)
install.packages("nleqslv")
library(nleqslv)
TT <- 1
D1 <- 1000
R <- 0.01
sigmaS <- .1
SO1 <- 1000
fnewton <- function(x){
y <- numeric(2)
d1 <- (log(x[1]/D1)+(R+x[2]^2/2)*TT)/x[2]*sqrTT(TT)
d2 <- d1-x[2]*sqrTT(TT)
y[1] <- SO1 - (x[1]*pnorm(d1) - exp(-R*TT)*D1*pnorm(d2))
y[2] <- sigmaS*SO1 - pnorm(d1)*x[2]*x[1]
y
}
xstart <- c(21623379, 0.526177094846878)
?nleqslv
sols <- nleqslv(xstart, fnewton, method="Broyden")
fnewton <- function(x){
y <- numeric(2)
d1 <- (log(x[1]/D1)+(R+x[2]^2/2)*TT)/x[2]*sqrt(TT)
d2 <- d1-x[2]*sqrt(TT)
y[1] <- SO1 - (x[1]*pnorm(d1) - exp(-R*TT)*D1*pnorm(d2))
y[2] <- sigmaS*SO1 - pnorm(d1)*x[2]*x[1]
y
}
sols <- nleqslv(xstart, fnewton, method="Broyden")
sols
sols$termcd
sols$termcd %in% c(1,2)
xstart <- c(1, 1)
TT <- 1
D1 <- 1000
R <- 0.01
sigmaS <- .1
SO1 <- 1000
fnewton <- function(x){ # x is vector length 2
y <- numeric(2) # output y = f(x)
d1 <- (log(x[1]/D1)+(R+x[2]^2/2)*TT)/x[2]*sqrt(TT)
d2 <- d1-x[2]*sqrt(TT)
y[1] <- SO1 - (x[1]*pnorm(d1) - exp(-R*TT)*D1*pnorm(d2))
y[2] <- sigmaS*SO1 - pnorm(d1)*x[2]*x[1]
y
}
xstart <- c(1, 1)
sols <- nleqslv(xstart, fnewton, method="Broyden")
sols$x
sols
sols$termcd %in% c(1,2) # need this
xstart <- c(100, 0.1)
sols <- nleqslv(xstart, fnewton, method="Broyden")
sols$x # solutions
sols$termcd %in% c(1,2) # need this
xstart <- c(100^4, 0.1)
sols <- nleqslv(xstart, fnewton, method="Broyden")
sols$x # solutions
sols$termcd %in% c(1,2) # need this
xstart <- c(10^4, 0.1)
sols <- nleqslv(xstart, fnewton, method="Broyden")
sols$x # solutions
sols$termcd %in% c(1,2) # need this
sols$x
xstart <- c(10^4, 1)
# xstart <- c(21623379, 0.526177094846878) # good starting values
sols <- nleqslv(xstart, fnewton, method="Broyden")
sols$x # solutions, Solution is: c(1990.04983,0.05025).
sols$termcd %in% c(1,2) # need this
10^4
TT <- 1
D1 <- 1000
R <- 0.01
sigmaS <- .1
SO1 <- 1000
func <- function(x){ # x is vector length 2
y <- numeric(2) # output y = f(x)
d1 <- (log(x[1]/D1)+(R+x[2]^2/2)*TT)/x[2]*sqrt(TT)
d2 <- d1-x[2]*sqrt(TT)
y[1] <- SO1 - (x[1]*pnorm(d1) - exp(-R*TT)*D1*pnorm(d2))
y[2] <- sigmaS*SO1 - pnorm(d1)*x[2]*x[1]
y
}
# xstart <- c(1, 1) # this won't work - need good starting values
xstart <- c(10^4, 1) # this works: needs to be within a couple orders of magnitude...
# xstart <- c(21623379, 0.526177094846878) # very good starting values
sols <- nleqslv(xstart, func, method="Broyden")
sols$x # solutions, Solution is: c(1990.04983,0.05025).
sols$termcd %in% c(1,2) # need this
fun <- function(x) {
f <- numeric(length(x)) 					# read as:
f[1] <-  2*x[3]  + -2*x[2] + 3*x[1]  - 17					# 0 = 2z - 2y + 3x + 4
f[2] <-  3*x[3]  + 4*x[2]  + -3*x[1] + 5					# 0 = 3z + 4y - 3x + 3
f[3] <-  -1*x[3] + 2*x[2]  + 5*x[1]  - 25					# 0 = -z + 2y + 5x + 1
f
}
startx <- c(1,1,1) # start the answer search here
answers<-as.data.frame(nleqslv(startx,fun))
answers
?ifelse
fQP <- function(b) {-sum(c(0,5,0)*b)+0.5*sum(b*b)}
fQP
Amat       <- matrix(c(-4,-3,0,2,1,0,0,-2,1), 3, 3)
Amat
bvec       <- c(-8, 2, 0)
bvec
?constrOptim
citation(stats)
citation("stats")
fQP <- function(b) {-sum(c(0,5,0)*b)+0.5*sum(b*b)}
Amat       <- matrix(c(-4,-3,0,2,1,0,0,-2,1), 3, 3)
bvec       <- c(-8, 2, 0)
constrOptim(c(2,-1,-1), fQP, NULL, ui = t(Amat), ci = bvec)
# derivative
gQP <- function(b) {-c(0, 5, 0) + b}
constrOptim(c(2,-1,-1), fQP, gQP, ui = t(Amat), ci = bvec)
hQP <- function(b) {sum(c(0,5,0)*b)-0.5*sum(b*b)}
constrOptim(c(2,-1,-1), hQP, NULL, ui = t(Amat), ci = bvec,
control = list(fnscale = -1))
ph <- 1
alpha_na <- 1
beta_w.na <- 1/10
pw <- 0.5
pgw < - 0.5
ph <- 1
alpha_na <- 1
beta_w.na <- 1/10
pw <- 0.5
q_w.na_UC <- (pw/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
q_w.na_UC <- (pw/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
# x == quantities of water (here, just one: q_w.na)
pi_na <-function(x){(ph * qh) - (p_w.na * x[1])}
ui_mat <-  rbind(c(-1,1), c(1,0)) # parameters to constraints, form: a > b
ci_vec <- c(0,0)
ui_mat
ci_vec
constrOptim(c(q_w.na_UC ), pi_na, ui = ui_mat, ci = ci_vec)
solve(ui_mat)
solve(ui_mat) %*% ci_vec
theta <- solve(ui_mat) %*% ci_vec
theta_vec <- solve(ui_mat) %*% ci_vec
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec)
theta_vec <- (solve(ui_mat) %*% ci_vec) + 0.001
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec)
theta_vec <- (solve(ui_mat) %*% ci_vec) - 0.001
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec)
ui_mat * c(0,0) - ci_vec
ui_mat %*% c(0,0) - ci_vec
ui_mat %*% c(0,0) - ci_vec + 0.1
z <- rep(0.001,length(ci_vec))
z
ci_vec - z
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
z_vec <- rep(0.001,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
theta_vec
ui_mat %*% c(0,0) - ci_vec + z_vec
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec)
ui_mat <-  rbind(c(-1,1), c(1,0)) # parameters to constraints, form: a > b
ci_vec <- c(0,0)
z_vec <- rep(0.1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% c(0,0) - ci_vec + z_vec
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec)
ui_mat <-  rbind(c(-1,1), c(1,0)) # parameters to constraints, form: a > b
ci_vec <- c(0,0)
z_vec <- rep(1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% c(0,0) - ci_vec + z_vec
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec)
constrOptim(theta_vec, pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
pi_na
p_w.na
ph <- 1 # set previously by price funtion
qh <- 10
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
# unconstrained optim
q_w.na_UC <- (pw/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
pi_na( 0.1672502)
pi_na( 0.1)
plot(pi_na(1:10))
plot(pi_na(1): pi_na(10))
pi_na(1)
pi_na(10)
beta_w.na <- 1/3
pi_na(10)
pi_na(1)
clear.all()
rm.ls()
rm(list= ls());
rm(list= ls());
ph <- 1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
q_w.na_UC <- (pw/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
ui_mat <-  rbind(c(-1,1), c(1,0)) # parameters to constraints, form: a > b
ci_vec <- c(0,0)
z_vec <- rep(1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% c(0,0) - ci_vec + z_vec >= 0
q_w.na_UC
q_w.na_avail <- 100 # from previous hydrology step
q_w.na_avail <- 10 # from previous hydrology step
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
## profit function, with embedded production function
# x == quantities of water (here, just one: q_w.na)
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
ui_mat <-  rbind(c(-1), c(1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail,0)
z_vec <- rep(1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% c(0,0) - ci_vec + z_vec >= 0 # TRUE
length(ci_vec)
ui_mat
ci_vec
theta_vec <- (solve(ui_mat) %*% ci_vec )
solve(ui_mat)
x
y <- 10
y[1]
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec )
theta_vec
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
ui_mat %*% theta_vec - ci_vec
z_vec <- rep(1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
theta_vec
ui_mat %*% c(0,0) - ci_vec + z_vec >= 0 # TRUE
ui_mat %*% theta_vec - ci_vec + z_vec >= 0 # TRUE
constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
ui_mat %*% theta_vec - ci_vec + z_vec
z_vec
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
theta_vec
ui_mat %*% theta_vec - ci_vec
z_vec
z_vec <- rep(0.1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% theta_vec - ci_vec + z_vec >= 0 # TRUE
ui_mat %*% theta_vec - ci_vec + z_vec
constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
z_vec <- rep(20,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% theta_vec - ci_vec + z_vec >= 0 # TRUE
ui_mat %*% theta_vec - ci_vec + z_vec
ui_mat %*% theta_vec - ci_vec
z_vec <- rep(1,length(ci_vec))
z_vec
ci_vec - z_vec
(solve(ui_mat) %*% (ci_vec - z_vec) )
ui_mat %*% theta_vec - ci_vec >= 0
ui_mat %*% theta_vec - ci_vec
theta_vec
z_vec <- rep(1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec - z_vec) )
theta_vec
ui_mat %*% theta_vec - ci_vec
theta_vec <- (solve(ui_mat) %*% (ci_vec + z_vec) )
z_vec <- rep(1,length(ci_vec))
theta_vec <- (solve(ui_mat) %*% (ci_vec + z_vec) )
theta_vec
ui_mat %*% theta_vec - ci_vec - z
ui_mat %*% theta_vec - ci_vec - z_vec
theta_vec
theta_vec
ui_mat %*% 10 - ci_vec - z_vec >= 0 # TRUE
ui_mat %*% 8 - ci_vec - z_vec >= 0 # TRUE
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec )
ui_mat %*% theta_vec - ci_vec
theta_vec
ui_mat %*% 9 - ci_vec
ui_mat %*% theta_vec - ci_vec
constrOptim(theta = 9, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
constrOptim(theta = 9, f = pi_na, grad=NULL, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1))
constrOptim(theta = 9, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=NULL, method="Brent")
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
constrOptim(theta = 9, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
(p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
rm(list= ls());
ph <- 1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
q_w.na_avail <- 10 # from previous hydrology step
# unconstrained optim
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec )
theta_vec
ui_mat %*% theta_vec - ci_vec
constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
(solve(ui_mat) %*% ci_vec ) - 1
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 1
ui_mat %*% theta_vec - ci_vec
constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
rm(list= ls());
ph <- 1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
# q_w.na_avail <- 0.1 # from previous hydrology step (constrained)
q_w.na_avail <- 1 # # from previous hydrology step (unconstrained)
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
## gradient of objective function (profit)
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 1
ui_mat %*% theta_vec - ci_vec
#ui_mat %*% 9 - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
theta_vec
(solve(ui_mat) %*% ci_vec )
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.001
ui_mat %*% theta_vec - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
theta_vec
(solve(ui_mat) %*% ci_vec )
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
q_w.na_avail <- 0.1
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
#ui_mat %*% 9 - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
ph <- 0.001 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
q_w.na_avail <- 0.1 # from previous hydrology step (constrained)
# q_w.na_avail <- 1 # # from previous hydrology step (unconstrained)
## objective/profit function, with embedded production function
# x == quantities of water (here, just one: q_w.na)
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
#ui_mat %*% 9 - ci_vec
ui_mat %*% theta_vec - ci_vec >= 0
#ui_mat %*% 9 - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
ph <- 0.1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
q_w.na_avail <- 0.1 # from previous hydrology step (constrained)
# q_w.na_avail <- 1 # # from previous hydrology step (unconstrained)
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
## gradient of objective function (profit)
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
#ui_mat %*% 9 - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
ph <- 1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 0 # min hourly pay
q_w.na_avail <- 0.1 # from previous hydrology step (constrained)
# q_w.na_avail <- 1 # # from previous hydrology step (unconstrained)
## objective/profit function, with embedded production function
# x == quantities of water (here, just one: q_w.na)
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
## gradient of objective function (profit)
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
# q_w.na >= 0
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
#ui_mat %*% 9 - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
# compare to unconstrained optim
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
ph <- 1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 2
hm <- 5 # min hourly pay
q_w.na_avail <- 0.1 # from previous hydrology step (constrained)
# q_w.na_avail <- 1 # # from previous hydrology step (unconstrained)
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
# maximize
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
sols$par
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=NULL)
sols$par
?optimize
optimize(f = pi_na, lower = 0, upper = q_w.na_avail)
optimize(f = pi_na, lower = 0, upper = q_w.na_avail, control = list(fnscale = -1))
optimize(f = pi_na, lower = 0, upper = q_w.na_avail, maximum = TRUE)
q_w.na_UC
sols$par
ph <- 1 # set previously by price funtion
alpha_na <- 1
beta_w.na <- 1/10
p_w.na <- 0.5
hm <- 5 # min hourly pay
q_w.na_avail <- 0.1 # from previous hydrology step (constrained)
# q_w.na_avail <- 1 # # from previous hydrology step (unconstrained)
## objective/profit function, with embedded production function
# x == quantities of water (here, just one: q_w.na)
pi_na <-function(x){(ph * (hm + (alpha_na*x[1]^beta_w.na)) ) - (p_w.na * x[1])}
## gradient of objective function (profit)
pi_na_grad <-function(x){( ph * alpha_na * beta_w.na * (x^(beta_w.na - 1)) ) - p_w.na}
## constraints:
# q_w.na <= q_w.na.available
# q_w.na >= 0
ui_mat <-  rbind(c(-1)) # parameters to constraints, form: a > b
ci_vec <- c(-q_w.na_avail)
theta_vec <- (solve(ui_mat) %*% ci_vec ) - 0.00001
ui_mat %*% theta_vec - ci_vec
#ui_mat %*% 9 - ci_vec
sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=pi_na_grad)
# sols <- constrOptim(theta = theta_vec, f = pi_na, ui = ui_mat, ci = ci_vec, control = list(fnscale = -1), grad=NULL) # gives good approx answer, but sends a warning
sols$par
q_w.na_UC <- (p_w.na/(ph*alpha_na*beta_w.na))^(1/(beta_w.na - 1))
q_w.na_UC
optimize(f = pi_na, lower = 0, upper = q_w.na_avail, maximum = TRUE)
sols
sols$convergence == 0
optimize(f = pi_na, lower = 0, upper = q_w.na_avail, maximum = TRUE)
q_w.na_UC
pi_na(q_w.na_UC)
R.Version()
install.packages("hydromad", repos="http://hydromad.catchment.org")
library(package = "hydromad")
install.packages("hydromad", repos="http://hydromad.catchment.org", type="source")
install.packages("hydromad", repos="http://hydromad.catchment.org", type="source")
install.packages("/Users/mcl/Desktop/hydromad_0.9-20.tar.gz", repos=NULL, type="source")
system("locate libSM.6.dylib")
install.packages("hydromad", repos="http://hydromad.catchment.org")
install.packages("hydromad", repos="http://hydromad.catchment.org", type="source")
install.packages("/Users/mcl/Desktop/hydromad_0.9-20.tar.gz", repos=NULL, type="source")
rm(list= ls());
master <- "/Users/mcl/Dropbox/Year3/STATS_MA/code/final/CorSens_package/CorSens"
setwd(master)
# load libraries
library(devtools)
library(roxygen2)
load_all(master, T)
document(".")
check_doc()
test()
master
check()
build_vignettes()
build()
install("/Users/mcl/Dropbox/Year3/STATS_MA/code/final/CorSens_package/CorSens")
library(CorSens)
?CorSens
vignette(package = "CorSens") # see names
vignette("tests", package = "CorSens")
vignette("example", package = "CorSens")
